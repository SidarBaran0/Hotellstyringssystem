@page "/booking"
@using DatabaseLibrary.Context
@using Microsoft.AspNetCore.Authorization
@using DatabaseLibrary.Models
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Oblig4Context DbContext
@rendermode InteractiveServer

@attribute [Authorize]

<PageTitle>Book rom</PageTitle>

<h1>Booking av rom</h1>

<select @bind="valgtRomKvalitet">
    @foreach (var rom in roomQuality)
    {
        <option value="@rom.Id">@rom.Kvalitet</option>
    }
</select>

<input type="date" @bind="startdato"/>
<input type="date" @bind="sluttdato"/>
<input type="number" @bind="antallPersoner" min="1"/>
<button @onclick="BookRom">Book rom</button>

@if (soekt)
{
    <p>Rommet er booket</p>
}   

@code {
    private string valgtRomKvalitet;
    private List<Romdata> roomQuality;
    private List<Room> rooms;
    private DateTime startdato = DateTime.Now;
    private DateTime sluttdato = DateTime.Now.AddDays(1);
    private int antallPersoner = 1;
    private int bruker;
    bool soekt;
    

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUser();
        roomQuality = new List<Romdata>();
        rooms = new List<Room>();
        roomQuality = await DbContext.Romdata.ToListAsync();
    }
    
    private async Task<string> GetCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            return user.Identity.Name;
        }

        return null;
    }
    
    private async Task BookRom()
    {
        try
        {
            var userId = await GetCurrentUser();
            var romId = await CreateRoom();

            var booking = new Bookingdata
            {
                RomId = romId,
                Startdato = startdato,
                Sluttdato = sluttdato,
                AntallPersoner = antallPersoner,
                UserId = userId
            };

            DbContext.Bookingdata.Add(booking);
            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            // Log the error and the inner exception message
            Console.WriteLine("Error: " + ex.Message);
            if (ex.InnerException != null)
            {
                Console.WriteLine("Inner Exception: " + ex.InnerException.Message);
            }
        }
    }
    
    private async Task<int> CreateRoom()
    {
        var newRoom = new Room
        {
            Quality = valgtRomKvalitet,
            Name = get
            NumberOfBeds = antallPersoner
        };

        DbContext.Rooms.Add(newRoom);
        await DbContext.SaveChangesAsync();

        return newRoom.Id;
    }
}